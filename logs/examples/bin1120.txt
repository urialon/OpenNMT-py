Context: 
device . audio _ video _ handsfree , " _ audio _ video _ handsfree _ " ) . value ( bluetooth _ class . device . audio _ video _ headphones , " _ audio _ video _ headphones _ " ) . value ( bluetooth _ class . device . audio _ video _ hifi _ audio , " _ audio _ video _ hifi _ audio _ " ) . value ( bluetooth _ class . device . audio _ video _ loudspeaker , " _ audio _ video _ loudspeaker _ " ) . value ( bluetooth _ class . device . audio _ video _ microphone , " _ audio _ video _ microphone _ " ) . value ( bluetooth _ class . device . audio _ video _ portable _ audio , " _ audio _ video _ portable _ audio _ " ) . value ( bluetooth _ class . device . audio _ video _ set _ top _ box , " _ audio _ video _ set _ top _ box _ " ) . value ( bluetooth _ class . device . audio _ video _ uncategorized , " _ audio _ video _ uncategorized _ " ) . value ( bluetooth _ class . device . audio _ video _ vcr , " _ audio _ video _ vcr _ " ) . value ( bluetooth _ class . device . audio _ video _ video _ camera , " _ audio _ video _ video _ camera _ " ) . value ( bluetooth _ class . device . audio _ video _ video _ conferencing , " _ audio _ video _ video _ conferencing _ " ) . value ( bluetooth _ class . device . audio _ video _ video _ display _ and _ loudspeaker , " _ audio _ video _ video _ display _ and _ loudspeaker _ " ) . value ( bluetooth _ class . device . audio _ video _ video _ gaming _ toy , " _ audio _ video _ video _ gaming _ toy _ " ) . value ( bluetooth _ class . device . audio _ video _ video _ monitor , " _ audio _ video _ video _ monitor _ " ) . value ( bluetooth _ class . device . audio _ video _ wearable _ headset , " _ audio _ video _ wearable _ headset _ " ) . value ( bluetooth _ class . device . computer _ desktop , " _ computer _ desktop _ " ) . value ( bluetooth _ class . device . computer _ handheld _ pc _ pda , " _ computer _ handheld _ pc _ pda _ " ) . value ( bluetooth _ class . device . computer _ laptop , " _ computer _ laptop _ " ) . value ( bluetooth _ class . device . computer _ palm _ size _ pc _ pda , " _ computer _ palm _ size _ pc _ pda _ " ) . value ( bluetooth _ class . device . computer _ server , " _ computer _ server _ " ) . value ( bluetooth _ class . device . computer _ uncategorized , " _ computer _ uncategorized _ " ) . value ( bluetooth _ class . device . computer _ wearable , " _ computer _ wearable _ " ) . value ( bluetooth _ class . device . health _ blood _ pressure , " _ health _ blood _ pressure _ " ) . value ( bluetooth _ class . device . health _ data _ display , " _ health _ data _ display _ " ) . value ( bluetooth _ class . device . health _ glucose , " _ health _ glucose _ " ) . value ( bluetooth _ class . device . health _ pulse _ oximeter , " _ health _ pulse _ oximeter _ " ) . value ( bluetooth _ class . device . health _ pulse _ rate , " _ health _ pulse _ rate _ " ) . value ( bluetooth _ class . device . health _ thermometer , " _ health _ thermometer _ " ) . value ( bluetooth _ class . device . health _ uncategorized , " _ health _ uncategorized _ " ) . value ( bluetooth _ class . device . health _ weighing , " _ health _ weighing _ " ) . value ( bluetooth _ class . device . phone _ cellular , " _ phone _ cellular _ " ) . value ( bluetooth _ class . device . phone _ cordless , " _ phone _ cordless _ " ) . value ( bluetooth _ class . device . phone _ isdn , " _ phone _ isdn _ " ) . value ( bluetooth _ class . device . phone _ modem _ or _ gateway , " _ phone _ modem _ or _ gateway _ " ) . value ( bluetooth _ class . device . phone _ smart , " _ phone _ smart _ " ) . value ( bluetooth _ class . device . phone _ uncategorized , " _ phone _ uncategorized _ " ) . value ( bluetooth _ class . device . toy _ controller , " _ toy _ controller _ " ) . value ( bluetooth _ class . device . toy _ doll _ action _ figure , " _ toy _ doll _ action _ figure _ " ) . value ( bluetooth _ class . device . toy _ game , " _ toy _ game _ " ) . value ( bluetooth _ class . device . toy _ robot , " _ toy _ robot _ " ) . value ( PRED , " _ toy _ uncategorized _ " ) . value ( bluetooth _ class . device . toy _ vehicle , " _ toy _ vehicle _ " ) . value ( bluetooth _ class . device . wearable _ glasses , " _ wearable _ glasses _ " ) . value ( bluetooth _ class . device . wearable _ helmet , " _ wearable _ helmet _ " ) . value ( bluetooth _ class . device . wearable _ jacket , " _ wearable _ jacket _ " ) . value ( bluetooth _ class . device . wearable _ pager , " _ wearable _ pager _ " ) . value ( bluetooth _ class . device . wearable _ uncategorized , " _ wearable _ uncategorized _ " ) . value ( bluetooth _ class . device . wearable _ wrist _ watch , " _ wearable _ wrist _ watch _ " ) . get ( ) ; }
Ground truth: bluetooth_class.device.toy_uncategorized
Syntactic prediction: bluetooth_class.device.toy_uncategorized
Baseline prediction: bluetooth_class.device.toy_robot

Context: 
matrix _ 4 mul ( matrix _ 4 matrix ) { tmp [ m _ 00 ] = val [ m _ 00 ] * matrix . val [ m _ 00 ] + val [ m _ 01 ] * matrix . val [ m _ 10 ] + val [ m _ 02 ] * matrix . val [ m _ 20 ] + val [ m _ 03 ] * matrix . val [ m _ 30 ] ; tmp [ m _ 01 ] = val [ m _ 00 ] * matrix . val [ m _ 01 ] + val [ m _ 01 ] * matrix . val [ m _ 11 ] + val [ m _ 02 ] * matrix . val [ m _ 21 ] + val [ m _ 03 ] * matrix . val [ m _ 31 ] ; tmp [ m _ 02 ] = val [ m _ 00 ] * matrix . val [ m _ 02 ] + val [ m _ 01 ] * matrix . val [ m _ 12 ] + val [ m _ 02 ] * matrix . val [ m _ 22 ] + val [ m _ 03 ] * matrix . val [ m _ 32 ] ; tmp [ m _ 03 ] = val [ m _ 00 ] * matrix . val [ m _ 03 ] + val [ m _ 01 ] * matrix . val [ m _ 13 ] + val [ m _ 02 ] * matrix . val [ m _ 23 ] + val [ m _ 03 ] * matrix . val [ m _ 33 ] ; tmp [ m _ 10 ] = val [ m _ 10 ] * matrix . val [ m _ 00 ] + val [ m _ 11 ] * matrix . val [ m _ 10 ] + val [ m _ 12 ] * matrix . val [ m _ 20 ] + val [ m _ 13 ] * matrix . val [ m _ 30 ] ; tmp [ m _ 11 ] = val [ m _ 10 ] * matrix . val [ m _ 01 ] + val [ m _ 11 ] * matrix . val [ m _ 11 ] + val [ m _ 12 ] * matrix . val [ m _ 21 ] + val [ m _ 13 ] * matrix . val [ m _ 31 ] ; PRED = val [ m _ 10 ] * matrix . val [ m _ 02 ] + val [ m _ 11 ] * matrix . val [ m _ 12 ] + val [ m _ 12 ] * matrix . val [ m _ 22 ] + val [ m _ 13 ] * matrix . val [ m _ 32 ] ; tmp [ m _ 13 ] = val [ m _ 10 ] * matrix . val [ m _ 03 ] + val [ m _ 11 ] * matrix . val [ m _ 13 ] + val [ m _ 12 ] * matrix . val [ m _ 23 ] + val [ m _ 13 ] * matrix . val [ m _ 33 ] ; tmp [ m _ 20 ] = val [ m _ 20 ] * matrix . val [ m _ 00 ] + val [ m _ 21 ] * matrix . val [ m _ 10 ] + val [ m _ 22 ] * matrix . val [ m _ 20 ] + val [ m _ 23 ] * matrix . val [ m _ 30 ] ; tmp [ m _ 21 ] = val [ m _ 20 ] * matrix . val [ m _ 01 ] + val [ m _ 21 ] * matrix . val [ m _ 11 ] + val [ m _ 22 ] * matrix . val [ m _ 21 ] + val [ m _ 23 ] * matrix . val [ m _ 31 ] ; tmp [ m _ 22 ] = val [ m _ 20 ] * matrix . val [ m _ 02 ] + val [ m _ 21 ] * matrix . val [ m _ 12 ] + val [ m _ 22 ] * matrix . val [ m _ 22 ] + val [ m _ 23 ] * matrix . val [ m _ 32 ] ; tmp [ m _ 23 ] = val [ m _ 20 ] * matrix . val [ m _ 03 ] + val [ m _ 21 ] * matrix . val [ m _ 13 ] + val [ m _ 22 ] * matrix . val [ m _ 23 ] + val [ m _ 23 ] * matrix . val [ m _ 33 ] ; tmp [ m _ 30 ] = val [ m _ 30 ] * matrix . val [ m _ 00 ] + val [ m _ 31 ] * matrix . val [ m _ 10 ] + val [ m _ 32 ] * matrix . val [ m _ 20 ] + val [ m _ 33 ] * matrix . val [ m _ 30 ] ; tmp [ m _ 31 ] = val [ m _ 30 ] * matrix . val [ m _ 01 ] + val [ m _ 31 ] * matrix . val [ m _ 11 ] + val [ m _ 32 ] * matrix . val [ m _ 21 ] + val [ m _ 33 ] * matrix . val [ m _ 31 ] ; tmp [ m _ 32 ] = val [ m _ 30 ] * matrix . val [ m _ 02 ] + val [ m _ 31 ] * matrix . val [ m _ 12 ] + val [ m _ 32 ] * matrix . val [ m _ 22 ] + val [ m _ 33 ] * matrix . val [ m _ 32 ] ; tmp [ m _ 33 ] = val [ m _ 30 ] * matrix . val [ m _ 03 ] + val [ m _ 31 ] * matrix . val [ m _ 13 ] + val [ m _ 32 ] * matrix . val [ m _ 23 ] + val [ m _ 33 ] * matrix . val [ m _ 33 ] ; return this . set ( tmp ) ; }
Ground truth: tmp[m_12]
Syntactic prediction: tmp[m_12]
Baseline prediction: tmp[m_11]

Context: 
timeline create _ timeline ( jfx _ hamburger burger ) { double burger _ width = burger . get _ children ( ) . get ( 0 ) . get _ layout _ bounds ( ) . get _ width ( ) ; double burger _ height = burger . get _ children ( ) . get ( 2 ) . get _ bounds _ in _ parent ( ) . get _ max _ y ( ) - burger . get _ children ( ) . get ( 0 ) . get _ bounds _ in _ parent ( ) . get _ min _ y ( ) ; double hypotenuse = math . sqrt ( math . pow ( burger _ height / 2 - burger . get _ children ( ) . get ( 0 ) . get _ layout _ bounds ( ) . get _ height ( ) / 2 , 2 ) + PRED ) ; double angle = math . to _ degrees ( math . asin ( ( burger _ height / 2 - burger . get _ children ( ) . get ( 0 ) . get _ layout _ bounds ( ) . get _ height ( ) / 2 ) / hypotenuse ) ) ; double burger _ diagonal = math . sqrt ( math . pow ( burger . get _ children ( ) . get ( 0 ) . get _ layout _ bounds ( ) . get _ height ( ) , 2 ) + math . pow ( burger . get _ children ( ) . get ( 0 ) . get _ bounds _ in _ parent ( ) . get _ width ( ) / 2 , 2 ) ) ; double theta = ( 90 - angle ) + math . to _ degrees ( math . atan ( ( burger . get _ children ( ) . get ( 0 ) . get _ layout _ bounds ( ) . get _ height ( ) ) / ( burger . get _ children ( ) . get ( 0 ) . get _ bounds _ in _ parent ( ) . get _ width ( ) / 2 ) ) ) ; double h _ offset = math . cos ( math . to _ radians ( theta ) ) * burger _ diagonal / 2 ; double trans _ y = burger . get _ children ( ) . get ( 0 ) . get _ layout _ bounds ( ) . get _ height ( ) / 2 + burger . get _ spacing ( ) - h _ offset ; double trans _ x = burger _ width / 2 - math . sin ( math . to _ radians ( theta ) ) * ( burger _ diagonal / 2 ) ; return new timeline ( new key _ frame ( duration . zero , new key _ value ( burger . rotate _ property ( ) , 0 , interpolator . ease _ both ) , new key _ value ( burger . get _ children ( ) . get ( 0 ) . rotate _ property ( ) , 0 , interpolator . ease _ both ) , new key _ value ( burger . get _ children ( ) . get ( 0 ) . translate _ y _ property ( ) , 0 , interpolator . ease _ both ) , new key _ value ( burger . get _ children ( ) . get ( 0 ) . translate _ x _ property ( ) , 0 , interpolator . ease _ both ) , new key _ value ( burger . get _ children ( ) . get ( 0 ) . scale _ x _ property ( ) , 1 , interpolator . ease _ both ) , new key _ value ( burger . get _ children ( ) . get ( 2 ) . rotate _ property ( ) , 0 , interpolator . ease _ both ) , new key _ value ( burger . get _ children ( ) . get ( 2 ) . translate _ y _ property ( ) , 0 , interpolator . ease _ both ) , new key _ value ( burger . get _ children ( ) . get ( 2 ) . translate _ x _ property ( ) , 0 , interpolator . ease _ both ) , new key _ value ( burger . get _ children ( ) . get ( 2 ) . scale _ x _ property ( ) , 1 , interpolator . ease _ both ) ) , new key _ frame ( duration . millis ( 1000 ) , new key _ value ( burger . rotate _ property ( ) , 0 , interpolator . ease _ both ) , new key _ value ( burger . get _ children ( ) . get ( 0 ) . rotate _ property ( ) , angle , interpolator . ease _ both ) , new key _ value ( burger . get _ children ( ) . get ( 0 ) . translate _ y _ property ( ) , trans _ y , interpolator . ease _ both ) , new key _ value ( burger . get _ children ( ) . get ( 0 ) . translate _ x _ property ( ) , trans _ x , interpolator . ease _ both ) , new key _ value ( burger . get _ children ( ) . get ( 0 ) . scale _ x _ property ( ) , 0 _ .5 , interpolator . ease _ both ) , new key _ value ( burger . get _ children ( ) . get ( 2 ) . rotate _ property ( ) , - angle , interpolator . ease _ both ) , new key _ value ( burger . get _ children ( ) . get ( 2 ) . translate _ y _ property ( ) , - trans _ y , interpolator . ease _ both ) , new key _ value ( burger . get _ children ( ) . get ( 2 ) . translate _ x _ property ( ) , trans _ x , interpolator . ease _ both ) , new key _ value ( burger . get _ children ( ) . get ( 2 ) . scale _ x _ property ( ) , 0 _ .5 , interpolator . ease _ both ) ) ) ; }
Ground truth: math.pow(burger_width/2,2)
Syntactic prediction: math.pow(burger_width/2,2)
Baseline prediction: burger.get_spacing()

