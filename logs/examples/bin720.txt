Context: 
@ override pb . storage _ payload to _ proto _ message ( ) { pb . offer _ payload . builder builder = pb . offer _ payload . new _ builder ( ) . set _ id ( id ) . set _ date ( date ) . set _ owner _ node _ address ( owner _ node _ address . to _ proto _ message ( ) ) . set _ pub _ key _ ring ( pub _ key _ ring . to _ proto _ message ( ) ) . set _ direction ( direction . to _ proto _ message ( direction ) ) . set _ price ( price ) . set _ market _ price _ margin ( market _ price _ margin ) . set _ use _ market _ based _ price ( use _ market _ based _ price ) . set _ amount ( amount ) . set _ min _ amount ( min _ amount ) . set _ base _ currency _ code ( base _ currency _ code ) . set _ counter _ currency _ code ( counter _ currency _ code ) . add _ all _ arbitrator _ node _ addresses ( arbitrator _ node _ addresses . stream ( ) . map ( node _ address :: to _ proto _ message ) . collect ( collectors . to _ list ( ) ) ) . add _ all _ mediator _ node _ addresses ( mediator _ node _ addresses . stream ( ) . map ( node _ address :: to _ proto _ message ) . collect ( collectors . to _ list ( ) ) ) . set _ payment _ method _ id ( payment _ method _ id ) . set _ maker _ payment _ account _ id ( maker _ payment _ account _ id ) . set _ version _ nr ( version _ nr ) . set _ block _ height _ at _ offer _ creation ( block _ height _ at _ offer _ creation ) . set _ tx _ fee ( tx _ fee ) . set _ maker _ fee ( maker _ fee ) . set _ is _ currency _ for _ maker _ fee _ btc ( is _ currency _ for _ maker _ fee _ btc ) . set _ buyer _ security _ deposit ( buyer _ security _ deposit ) . set _ seller _ security _ deposit ( seller _ security _ deposit ) . set _ max _ trade _ limit ( max _ trade _ limit ) . set _ max _ trade _ period ( max _ trade _ period ) . set _ use _ auto _ close ( use _ auto _ close ) . set _ use _ re _ open _ after _ auto _ close ( use _ re _ open _ after _ auto _ close ) . set _ lower _ close _ price ( lower _ close _ price ) . set _ upper _ close _ price ( upper _ close _ price ) . set _ is _ private _ offer ( is _ private _ offer ) . set _ protocol _ version ( protocol _ version ) ; builder . set _ offer _ fee _ payment _ tx _ id ( check _ not _ null ( offer _ fee _ payment _ tx _ id , " _ offer _ payload _ is in invalid state: offerfeepaymenttxid is not set when adding to p2p network." ) ) ; optional . of _ nullable ( country _ code ) . if _ present ( builder :: set _ country _ code ) ; optional . of _ nullable ( bank _ id ) . if _ present ( builder :: set _ bank _ id ) ; optional . of _ nullable ( accepted _ bank _ ids ) . if _ present ( builder :: add _ all _ accepted _ bank _ ids ) ; PRED . if _ present ( builder :: add _ all _ accepted _ country _ codes ) ; optional . of _ nullable ( hash _ of _ challenge ) . if _ present ( builder :: set _ hash _ of _ challenge ) ; optional . of _ nullable ( extra _ data _ map ) . if _ present ( builder :: put _ all _ extra _ data ) ; return pb . storage _ payload . new _ builder ( ) . set _ offer _ payload ( builder ) . build ( ) ; }
Ground truth: optional.of_nullable(accepted_country_codes)
Syntactic prediction: optional.of_nullable(accepted_country_codes)
Baseline prediction: optional.of_nullable(extra_data_map)

Context: 
object [ ] [ ] get _ contents ( ) { return new object [ ] [ ] { { " _ ui _ language _ " , " _ cy _ " } , { " _ help _ language _ " , " _ cy _ " } , { " _ language _ " , " _ cy _ " } , { " _ alphabet _ " , new char _ array _ wrapper ( new char [ ] { 0 _ x _ 0430 , 0 _ x _ 0432 , 0 _ x _ 0433 , 0 _ x _ 0434 , 0 _ x _ 0435 , 0 _ x _ 0437 , 0 _ x _ 0438 , 0 _ x _ 0439 , 0 _ x _ 04 _ a _ 9 , 0 _ x _ 0457 , 0 _ x _ 043 _ a , 0 _ x _ 043 _ b , 0 _ x _ 043 _ c , 0 _ x _ 043 _ d , 0 _ x _ 046 _ f , 0 _ x _ 043 _ e , 0 _ x _ 043 _ f , 0 _ x _ 0447 , 0 _ x _ 0440 , 0 _ x _ 0441 , 0 _ x _ 0442 , 0 _ x _ 0443 , 0 _ x _ 0444 , 0 _ x _ 0445 , 0 _ x _ 0470 , 0 _ x _ 0460 , 0 _ x _ 0446 } ) } , { " _ trad _ alphabet _ " , new char _ array _ wrapper ( new char [ ] { 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'i' , 'j' , 'k' , 'l' , 'm' , 'n' , 'o' , 'p' , 'q' , 'r' , 's' , 't' , 'u' , 'v' , 'w' , 'x' , 'y' , 'z' } ) } , { " _ orientation _ " , " _ left _ to _ right _ " } , { " _ numbering _ " , " _ multiplicative _ -additive" } , { " _ multiplier _ order _ " , " _ precedes _ " } , { " _ number _ groups _ " , new int _ array _ wrapper ( new int [ ] { 100 , 10 , 1 } ) } , { " _ multiplier _ " , new long _ array _ wrapper ( new long [ ] { 1000 } ) } , { " _ multiplier _ char _ " , PRED } , { " _ zero _ " , new char _ array _ wrapper ( new char [ 0 ] ) } , { " _ digits _ " , new char _ array _ wrapper ( new char [ ] { 0 _ x _ 0430 , 0 _ x _ 0432 , 0 _ x _ 0433 , 0 _ x _ 0434 , 0 _ x _ 0435 , 0 _ x _ 0437 , 0 _ x _ 0438 , 0 _ x _ 0439 , 0 _ x _ 04 _ a _ 9 } ) } , { " _ tens _ " , new char _ array _ wrapper ( new char [ ] { 0 _ x _ 0457 , 0 _ x _ 043 _ a , 0 _ x _ 043 _ b , 0 _ x _ 043 _ c , 0 _ x _ 043 _ d , 0 _ x _ 046 _ f , 0 _ x _ 043 _ e , 0 _ x _ 043 _ f , 0 _ x _ 0447 } ) } , { " _ hundreds _ " , new char _ array _ wrapper ( new char [ ] { 0 _ x _ 0440 , 0 _ x _ 0441 , 0 _ x _ 0442 , 0 _ x _ 0443 , 0 _ x _ 0444 , 0 _ x _ 0445 , 0 _ x _ 0470 , 0 _ x _ 0460 , 0 _ x _ 0446 } ) } , { " _ tables _ " , new string _ array _ wrapper ( new string [ ] { " _ hundreds _ " , " _ tens _ " , " _ digits _ " } ) } } ; }
Ground truth: newchar_array_wrapper(newchar[]{0_x_03_d_9})
Syntactic prediction: newchar_array_wrapper(newchar[]{0_x_03_d_9})
Baseline prediction: newchar_array_wrapper(newchar[0])

