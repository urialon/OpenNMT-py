Context: 
p _ collection _ view < string > job _ id _ token _ view = create _ job _ id _ view ( p ) ; final p _ collection _ view < string > temp _ file _ prefix _ view = create _ temp _ file _ prefix _ view ( p , job _ id _ token _ view ) ; p _ collection < kv < destination _ t , table _ row > > input _ in _ global _ window = input . apply ( " _ rewindow _ into _ global _ " , window . < kv < destination _ t , table _ row > > into ( new global _ windows ( ) ) . triggering ( repeatedly . forever ( after _ first . of ( after _ processing _ time . past _ first _ element _ in _ pane ( ) . plus _ delay _ of ( triggering _ frequency ) , after _ pane . element _ count _ at _ least ( file _ triggering _ record _ count ) ) ) ) . discarding _ fired _ panes ( ) ) ; p _ collection < write _ bundles _ to _ files . result < destination _ t > > results = write _ sharded _ files ( input _ in _ global _ window , temp _ file _ prefix _ view ) ; results = results . apply ( " _ apply _ user _ trigger _ " , window . < write _ bundles _ to _ files . result < destination _ t > > into ( new global _ windows ( ) ) . triggering ( repeatedly . forever ( after _ processing _ time . past _ first _ element _ in _ pane ( ) . plus _ delay _ of ( triggering _ frequency ) ) ) . discarding _ fired _ panes ( ) ) ; tuple _ tag < kv < sharded _ key < destination _ t > , list < string > > > multi _ partitions _ tag = new tuple _ tag < kv < sharded _ key < destination _ t > , list < string > > > ( " _ multi _ partitions _ tag _ " ) ; tuple _ tag < kv < sharded _ key < destination _ t > , list < string > > > single _ partition _ tag = new tuple _ tag < kv < sharded _ key < destination _ t > , list < string > > > ( " _ single _ partition _ tag _ " ) ; p _ collection _ tuple partitions = results . apply ( " _ attach _ singleton _ key _ " , with _ keys . < void , write _ bundles _ to _ files . result < destination _ t > > of ( ( void ) null ) ) . set _ coder ( kv _ coder . of ( void _ coder . of ( ) , write _ bundles _ to _ files . result _ coder . of ( destination _ coder ) ) ) . apply ( " _ group _ onto _ singleton _ " , group _ by _ key . < void , result < destination _ t > > create ( ) ) . apply ( " _ extract _ result _ values _ " , values . < iterable < result < destination _ t > > > create ( ) ) . apply ( " _ write _ partition _ triggered _ " , par _ do . of ( new write _ partition < > ( singleton _ table , dynamic _ destinations , temp _ file _ prefix _ view , multi _ partitions _ tag , single _ partition _ tag ) ) . with _ side _ inputs ( temp _ file _ prefix _ view ) . with _ output _ tags ( multi _ partitions _ tag , tuple _ tag _ list . of ( single _ partition _ tag ) ) ) ; p _ collection < kv < table _ destination , string > > temp _ tables = write _ temp _ tables ( partitions . get ( multi _ partitions _ tag ) , job _ id _ token _ view ) ; temp _ tables . apply ( window . < kv < table _ destination , string > > into ( new global _ windows ( ) ) . triggering ( repeatedly . forever ( after _ pane . element _ count _ at _ least ( 1 ) ) ) ) . apply ( with _ keys . < void , kv < table _ destination , string > > of ( ( void ) null ) ) . set _ coder ( kv _ coder . of ( void _ coder . of ( ) , kv _ coder . of ( table _ destination _ coder _ v _ 2 . of ( ) , string _ utf _ 8 _ coder . of ( ) ) ) ) . apply ( group _ by _ key . < void , kv < table _ destination , string > > create ( ) ) . apply ( values . < iterable < kv < table _ destination , string > > > create ( ) ) . apply ( " _ write _ rename _ triggered _ " , par _ do . of ( new write _ rename ( big _ query _ services , job _ id _ token _ view , write _ disposition , create _ disposition ) ) . with _ side _ inputs ( job _ id _ token _ view ) ) ; write _ single _ partition ( PRED , job _ id _ token _ view ) ; return write _ result ( p ) ; }
Ground truth: partitions.get(single_partition_tag)
Syntactic prediction: partitions.get(single_partition_tag)
Baseline prediction: p.get_table()

